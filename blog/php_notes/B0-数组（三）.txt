1.array range  ( mixed  $start  , mixed  $limit  [, number  $step  = 1  ] )
生成包含指定范围的索引数组，第三个参数是步长值（应用于表格）

$arr=range(2,10,2);
print_r($arr);
结果：
Array ( [0] => 2 [1] => 4 [2] => 6 [3] => 8 [4] => 10 ) 
----------------------------------------------------------------------------
2.array array_count_values  ( array $input  )
返回一个数组，该数组用 input 数组中的值作为键名，该值在 input 数组中出现的次数作为值

$arr=array('chen','ruei','ruei','chen','chen','fu',1,'1');
print_r(array_count_values($arr));
结果：
Array ( [chen] => 3 [ruei] => 2 [fu] => 1 [1] => 2 ) 
------------------------------------------------------------------------------
3.array array_pad  ( array $input  , int $pad_size  , mixed  $pad_value  )
对数组进行填充
如果 pad_size 为正，则填补到数组的右侧，如果为负则从左侧开始填补。如果 pad_size 的绝对值小于或等于 input 数组的长度则没有任何填补

$arr=array('chen','ruei','fu');
print_r(array_pad($arr,-5,'2'));
结果：
Array ( [0] => 2 [1] => 2 [2] => chen [3] => ruei [4] => fu ) 
-----------------------------------------------------------------------------
4.number  array_product  ( array $array  )
以整数或浮点数返回一个数组中所有值的乘积

$arr=array('1','3','4');
var_dump(array_product($arr));
结果：
int(12) 
=============================================
5.int array_push  ( array &$array  , mixed  $var  [, mixed  $...  ] )
将一个或多个单元压入数组的末尾（入栈）；返回返回处理之后数组的元素个数
$arr[]='ruei';效率更优
array_merge合并一个或多个数组 

$arr=array('1','3','4');
echo array_push($arr,'6');	//4
print_r($arr);	//Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 6 ) 
-------------------------------------------------------------------------
6.array_pop
删除数组末端元素，出栈
返回 array 的最后一个值

$arr=array('1','3','4');
echo array_pop($arr);	//4
print_r($arr);	//Array ( [0] => 1 [1] => 3 [2] )
---------------------------------------------
7.mixed  array_rand  ( array $input  [, int $num_req  = 1  ] )
从数组中随机取出一个或多个单元
如果你只取出一个， array_rand()  返回一个随机单元的键名，否则就返回一个包含随机键名的数组

$arr=array('1','3','4');
echo array_rand($arr);	//返回0-3，随机数
print_r(array_rand($arr,2));	//返回0-3，随机的两个数数组

----案例：随机出考题   exam.php-------
------------------------------------------------------------------
8.array array_reverse  ( array $array  [, bool $preserve_keys  = false  ] )
返回一个单元为相反顺序的新数组s
preserve_keys ：如果设置为 TRUE  会保留数字的键。 非数字的键则不受这个设置的影响，总是会被保留

$arr=array('1','3','4');
print_r(array_reverse($arr,true));	//Array ( [2] => 4 [1] => 3 [0] => 1 ) 
$arr1=array('name'=>'ruei','age'=>'18');
print_r(array_reverse($arr1));		//Array ( [age] => 18 [name] => ruei ) 

==============================================
9.mixed  array_reduce  ( array $input  , callable  $function  [, mixed  $initial  = NULL    ] )
回调函数 function 迭代地作用到 input 数组中的每一个单元中，从而将数组简化为单一的值

$arr=array(1,2,3,4,5);
echo array_reduce($arr,'a',100);	//115
function a($a,$b){			//$a=100
	$a+=$b;
	return $a;
}
-----------------------------------------------
10.array array_slice  ( array $array  , int $offset  [, int $length  = NULL    [, bool $preserve_keys  = false  ]] )
返回根据 offset 和 length 参数所指定的 array 数组中的一段序列

如果 offset 非负，则序列将从 array 中的此偏移量开始。如果 offset 为负，则序列将从 array 中距离末端这么远的地方开始

如果给出了 length 并且为正，则序列中将具有这么多的单元。如果给出了 length 并且为负，则序列将终止在距离数组末端这么远的地方。如果省略，则序列将从 offset 开始一直到 array 的末端

注意 array_slice()  默认会重新排序并重置数组的数字索引。你可以通过将 preserve_keys 设为 TRUE  来改变此行为

$arr=array(1,2,3,4,5);
print_r(array_slice($arr,-3,-1,true));
结果：Array ( [2] => 3 [3] => 4 ) 
--------------------------------------------------
11.array array_splice  ( array &$input  , int $offset  [, int $length  = 0  [, mixed  $replacement  ]] )
把数组中的一部分去掉并用其它值取代 

如果 offset 为正，则从 input 数组中该值指定的偏移量开始移除。如果 offset 为负，则从 input 末尾倒数该值指定的偏移量开始移除

如果省略 length，则移除数组中从 offset 到结尾的所有部分。如果指定了 length 并且为正值，则移除这么多单元。如果指定了 length 并且为负值，则移除从 offset 到数组末尾倒数 length 为止中间所有的单元。

如果给出了 replacement 数组，则被移除的单元被此数组中的单元替代

返回一个包含有被移除单元的数组。

$arr=array(1,2,3,4,5);
$arr1=array('name'=>6,5,3);
print_r(array_splice($arr,-3,-1,$arr1));
echo '<br/>';
print_r($arr);
结果：
Array ( [0] => 3 [1] => 4 )
Array ( [0] => 1 [1] => 2 [2] => 6 [3] => 5 [4] => 3 [5] => 5 ) 
-------------------------------------------------
12.array_sum---求和
     array_product---求积

$arr=array(3,4,5);
echo array_sum($arr);		//12
echo '<br/>';
echo array_product($arr);		//60

==============================================
13.bool sort  ( array &$array  [, int $sort_flags  = SORT_REGULAR  ] )
对数组进行升序排序,删除原有键名，重新赋值
返回值：成功时返回 TRUE ， 或者在失败时返回 FALSE 

$arr=array(5,3,1);
sort($arr);
print_r($arr);
结果：Array ( [0] => 1 [1] => 3 [2] => 5 ) 
------------------------------------------------------
14.bool natsort  ( array &$array  )
通过自然顺序进行排序，区分大小写;保持原有键名

echo '<pre>';
$arr=array('class1','class12','class2','class23');
natsort($arr);
print_r($arr);
结果：
Array
(
    [0] => class1
    [2] => class2
    [1] => class12
    [3] => class23
)
------------------------------------------------
15.bool natcasesort  ( array &$array  )
通过自然顺序进行排序，不区分大小写;保持原有键名

echo '<pre>';
$arr=array('class1','Class12','class2','class23');
natsort($arr);
print_r($arr);
结果：
Array
(
    [0] => class1
    [2] => class2
    [1] => Class12
    [3] => class23
)
-----------------------------------------
16.bool shuffle  ( array &$array  )
随机对数组进行排序；删除原有键名，重新赋值

$arr=array('class1'=>'name','Class12'=>'ruei','class2','class23');
shuffle($arr);
print_r($arr);
结果：
Array
(
    [0] => ruei
    [1] => name
    [2] => class2
    [3] => class23
)
---------------------------------------------------
17.array_multisort()
可以用来一次对多个数组进行排序，或者根据某一维或多维对多维数组进行排序
关联（ string ）键名保持不变，但数字键名会被重新索引

$arr=array(1,2,3,1);
$arr1=array(5,6,7,3);
array_multisort($arr,SORT_ASC,$arr1,SORT_DESC);
print_r($arr);
print_r($arr1);
结果：
Array
(
    [0] => 1
    [1] => 1
    [2] => 2
    [3] => 3
)
Array
(
    [0] => 5
    [1] => 3
    [2] => 6
    [3] => 7
)

=========================================
18.bool usort  ( array &$array  , callable  $cmp_function  )
通过回调函数对数组键值进行排序，原数组索引不保留

19.bool uasort  ( array &$array  , callable  $cmp_function  )
通过回调函数对数组键值进行排序，原数组索引保留

$arr=array('a'=>1,'b'=>2,'c'=>3,'d'=>1);
$arr1=array('a'=>1,'b'=>2,'c'=>3,'d'=>1);
usort($arr,'a');
uasort($arr1,'a');
function a($a,$b){
	if($a==$b){
		return 0;
	}
	return $a>$b?-1:1;
}
print_r($arr);
print_r($arr1);
结果：
Array
(
    [0] => 3
    [1] => 2
    [2] => 1
    [3] => 1
)
Array
(
    [c] => 3
    [b] => 2
    [d] => 1
    [a] => 1
)
---------------------------------------------------
20.bool uksort  ( array &$array  , callable  $cmp_function  )
通过自定义函数对数组键名进行排序，

21.bool ksort  ( array &$array  [, int $sort_flags  = SORT_REGULAR  ] )
保持原有键名，对键名进行升序排序

$arr=array('a'=>1,'b'=>2,'c'=>3,'d'=>1);
$arr1=array('a'=>1,'b'=>2,'c'=>3,'d'=>1);
function a($a,$b){
	if($a==$b){
		return 0;
	}
	return $a>$b?-1:1;
}
ksort($arr);
uksort($arr1,'a');
print_r($arr);
print_r($arr1);
结果：
Array
(
    [a] => 1
    [b] => 2
    [c] => 3
    [d] => 1
)
Array
(
    [d] => 1
    [c] => 3
    [b] => 2
    [a] => 1
)
--------------------------------------
22.asort
保持原有键名，对键值升序排序，sort()区别，后者删除原有键名，重新赋值

23.rsort
对数组进行反向排序，不保留键名（按照字母或数字反向排序）

24.arsort()
对数组进行反向排序，保留键名

25.krsort()
对数组键名进行反向排序

======


