----- 修饰符 ------
i	大小写不敏感匹配
g	全局匹配
----- 方括号 -------
[abc]	查找括号之间的任何字符
[0-9]	查找任何0-9的数字
[a-z]	查找任何小写a-z的字符
[A-Z]	查找任何大写A-Z的字符
[A-z]	查找任何A-Z大小写的字符
[^abc]	查找非括号之间的任何字符
----- 元字符 -----
.	查找单个字符，除了换行和行结束符(不推荐使用)
\d	数字
\D	非数字
\s	空白字符
\S	非空白字符
\w	单词字符(A-z0-9)
\W	非单词字符
----- 量词 -----
n{X}	匹配包含 X 个 n 的序列的字符串
n{X,Y}	匹配包含 X 或 Y 个 n 的序列的字符串
n{X,}	匹配包含至少 X 个 n 的序列的字符串
n+	匹配任何包含至少一个 n 的字符串
n*	匹配任何包含零个或多个 n 的字符串
n?	匹配任何包含零个或一个 n 的字符串
================================
================================
preg_match ― 执行一个正则表达式匹配
preg_match_all ― 执行一个全局正则表达式匹配，在第一个匹配找到后, 子序列继续从最后一次匹配位置搜索
preg_match(正则表达式，匹配的str，数组)

$str='chenrueifu21';
preg_match('/\d/', $str,$arr);
preg_match('/[^\d]/i', $str,$arr1);
print_r($arr);	Array ( [0] => 2 )
print_r($arr1);	Array ( [0] => c )

============================
原子组

$str=<<<str
	<h1>h11</h1>
	<h2>h21</h2>
str;
preg_match_all('/<([hH]\d{1})>(.*?)<(\/[hH]\d{1})>/',$str,$arr,PREG_SET_ORDER);
echo '<pre>';
print_r($arr);
---------------------
PREG_SET_ORDER排列方式
$matches[0] 包含第一次匹配得到的所有匹配(包含子组)
$matches[1] 是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推

Array
(
    [0] => Array
        (
            [0] => <h1>h11</h1>
            [1] => h1
            [2] => h11
            [3] => /h1
        )

    [1] => Array
        (
            [0] => <h2>h21</h2>
            [1] => h2
            [2] => h21
            [3] => /h2
        )
)
-------
默认PREG_PATTERN_ORDER 排列方式
$matches[0] 保存完整模式的所有匹配
$matches[1]  保存第一个子组的所有匹配，以此类推

Array
(
    [0] => Array
        (
            [0] => <h1>h11</h1>
            [1] => <h2>h21</h2>
        )

    [1] => Array
        (
            [0] => h1
            [1] => h2
        )

    [2] => Array
        (
            [0] => h11
            [1] => h21
        )

    [3] => Array
        (
            [0] => /h1
            [1] => /h2
        )
)
-----------------------------
注意单双引号的转义（上面的正则还可以以下面方式书写）

单引号的正则：
preg_match_all('/<([hH]\d{1})>(.*?)<\/(\1)>/',$str,$arr);
双引号的正则（需转义）：
preg_match_all("/<([hH]\d{1})>(.*?)<\/(\\1)>/",$str,$arr);

\\1：代表前面匹配的缓存，可以直接拿来调用
=====================
preg_replace ― 执行一个正则表达式的搜索和替换 ,返回新的字符串，也可以是数组
preg_replace(正则，替换内容，$str)

$str=<<<str
	<h1>h11</h1>
	<h2>h21</h2>
str;
$str = preg_replace('/<([hH]\d{1})>(.*?)<\/(\1)>/s',"<b>\\2</b>",$str);
echo $str;

输出 ：
<b>h11</b>
<b>h21</b>
============================
不缓存模式
?:

$str=<<<str
	www.chen.com 
	www.ruei.net
	bbs.fu.cn
str;
preg_match_all('/(?:www|bbs)(?:.*?)(com|net|cn)/is',$str,$arr);

echo "<pre>";
print_r($arr);

Array
(
    [0] => Array
        (
            [0] => www.chen.com
            [1] => www.ruei.net
            [2] => bbs.fu.cn
        )

    [1] => Array
        (
            [0] => com
            [1] => net
            [2] => cn
        )

)
-----------------------------
正则注释
?#

preg_match_all('/(?:www|bbs)(?#前缀)(?:.*?)(com|net|cn)/is',$str,$arr);