函数：一部分可重复执行的代码段，多次执行一次编译
特点：
	1.减少程序运行的复杂性
	2.提高程序的可靠性
	3.提高软件的开发效率
	4.提高程序的可维护性
	5.提高程序的重复性
语法：
	function 函数名(参数1，参数2......){
		代码段...
		return 返回值；
	}
调用：	函数名(参数1，参数2......)

函数可以在定义之前调用
---------------------------------------------------
function_exists(函数名)---检测函数是否存在
用法：
var_dump(function_exists('counter'));

================================
//简单计算器(加减乘除取余)默认--加法
function counter($a,$b,$way='+'){
	switch ($way) {
		case '+':
			return $a+$b;
		case '-':
			return $a-$b;
		case '*':
			return $a*$b;
		case '/':
			return $a/$b;
		case '%':
			return $a%$b;
		default:
			echo 1;
			break;
	}
}
==================================
1.变量的作用范围
$a=123;
function chen(){
	echo $a;
}
chen();		不能输出
-----------------------------
$a=123;
function chen(){
	$a=111;
	echo $a;
}
chen();		输出111
-------------------------
$a=123;
function chen(){
	global $a;	设置全局$a;global关键字只能在函数中使用
	echo $a.'<br/>';
	//unset($a);	释放全局变量
	$a=111;
}
chen();		输出123
echo $a;		输出111		unset()作用的结果：123
--------------------------------

2.静态变量------static
    a.是在所有对函数调用中共享
    b.只有在第一次调用中赋值

function chen(){
	static $a=1;
	echo $a.'<br/>';
	$a++;
}
chen();		结果：1
chen();		结果：2
chen();		结果：3
chen();		结果：4

-------------------------
3.按值传递和按址传递

function chen($a){
	echo $a.'<br/>';
	$a.='ruei';
}
$a='chen';
chen($a);		chen---按值传递
echo $a;		chen
-----------------------
function chen(&$a){
	echo $a.'<br/>';
	$a.='ruei';
}
$a='chen';
chen($a);		chen---按址传递
echo $a;		chenruei


======================
print_r()------打印，可打印数组
===================
一、任何数量的参数
func_get_args()---返回一个包含函数参数列表的数组
func_num_arges()---返回数组的个数
func_get_arge(int)---返回数组第几个的数值

function chen(){
	$a=func_get_args();
	//返回传入参数的数组
	foreach ($a as $key => $value) {
		echo $key.'&nbsp;'.$value.'<br/>';
	}
	/*
	0 1
	1 2
	2 3
	3 4
	4 5
	*/
	echo func_num_args().'<br/>';
	//返回传入参数数组的个数。结果：5
	echo func_get_arg(2);
	//返回传入参数数组第二个值。结果：3	
}
chen(1,2,3,4,5);
-----------------------------------
二、变量函数

$a='chen';
function chen(){
	echo '这是个函数chen';
}
echo $a.'<br/>';		//chen
echo $a();		//这是个函数chen
------------------------

三、递归调用 -- 在函数体内，调用本函数（调用自己）
注意：需加上停止调用的条件，否则会陷入死循环

function all($i){
	if($i>0){
		$s= $i + all($i-1);
		echo $s.'<br/>';
	}else{
		$s=$i; 	
	}
	return $s;
}
all(5);
结果：
1
3
6
10
15
-------------------
四、内部函数

function chen(){
	function ruei(){
		echo '222<br/>';
	}
	ruei();
	echo 1111;
	
}
chen();	结果：222    1111


=============================






